package Bat;

import java.util.Random;

import GeneticAlgorithm.Fitness;
import GeneticAlgorithm.Regeneration;
import Operators.Demand;
import Operators.Expiry;
import Operators.FinalDemand;
import Operators.FormatDisplay;
import Operators.Pull;
import Operators.Remainder;
import Operators.Supply;

import java.util.Arrays;

public class BatAlgorithm {

	private double[][] X; 		// Population/Solution (N x D)
	private double[][] V; 		// Velocities (N x D)
	private double[][] Q; 		// Frequency : 0 to Q_MAX (N x 1)
	private double[] F;			// Fitness (N)
	private double R; 			// Pulse Rate : 0 to 1
	private double A; 			// Louadness : A_MIN to A_MAX
	private double[][] lb;		// Lower bound (1 x D)
	private double[][] ub;		// Upper bound (1 x D)
	private double fmin; 		// Minimum fitness from F
 	private double[] B;			// Best solution array from X (D)	

	private final int N; 		// Number of bats
	private final int MAX; 		// Number of iterations
	private final double Q_MIN = 0.0;
	private final double Q_MAX = 2.0;
	private final double A_MIN;
	private final double A_MAX;
	private final double R_MIN;
	private final double R_MAX; 
	private final int D = 10;
	private final Random rand = new Random();
	//private static double[] supply=new double[8];
	//private static double[] demand=new double[8];
	private static double[] remainder=new double[8];
	private static double[] Compatible=new double[8];
	private static double[] EXPIRY=new double[8];
	private static double[] importation=new double[8];
	private static int NumberOfSolutions, bestGen, MaxGen, count,MaxDay, RandomPos;
	private static double[] CarryOver=new double[8];
	private static double demandForDay, supplyForDay, fitness,tempFit, expiry;
	private static double avgSup, avgDem, avgImp, avgExp;
	//private static double[] bestSupply;
	//private static double[] bestDemand;
	private static double[] bestRemainder;
	private static double[] bestImport;
	private double[] supply, demand,imp,exp,carry;
	private double[] bestSupply,bestDemand, bestImp, bestExp,bestCarryOver;
	private double amount=500;
	private int bestBat,bestItr;
	//private static double fitness;
	//private double [] demandForDay, supplyForDay;

	
	//objects
	FormatDisplay disp=new FormatDisplay();
	Fitness fit=new Fitness();
	Supply sup= new Supply();
	FinalDemand fd=new FinalDemand();
	//FormatDisplay display=new FormatDisplay();
	Remainder rem=new Remainder();
	Pull pull=new Pull();
	public BatAlgorithm(int N, int MAX, double A_MIN, double A_MAX, double R_MIN, double R_MAX){
		this.N = N;
		this.MAX = MAX;
		this.R_MAX = R_MAX;
		this.R_MIN = R_MIN;
		this.A_MAX = A_MAX;
		this.A_MIN = A_MIN;

		this.X = new double[N][D];
		this.V = new double[N][D];
		this.Q = new double[N][1];
		this.F = new double[N];
		this.R = (R_MAX + R_MIN) / 2;
		this.A = (A_MIN + A_MAX) / 2;
		this.supply=new double[8];
		this.demand=new double[8];
		this.imp=new double[8];
		this.exp=new double[8];
		this.amount=amount;
		// Initialize bounds
		this.lb = new double[1][D];
		for ( int i = 0; i < D; i++ ){
			this.lb[0][i] = -2.0;
		}
		this.ub = new double[1][D];
		for ( int i = 0; i < D; i++ ){
			this.ub[0][i] = 2.0;
		}

		// Initialize Q and V
		for ( int i = 0; i < N; i++ ){
			this.Q[i][0] = 0.0;
		}
		for ( int i = 0; i < N; i++ ){
			for ( int j = 0; j < D; j++ ) {
				this.V[i][j] = 0.0;
			}
		}

		// Initialize X
		for ( int i = 0; i < N; i++ ){
			for ( int j = 0; j < D; j++ ){
				this.X[i][j] = lb[0][j] + (ub[0][j] - lb[0][j]) * rand.nextDouble();
			}
			this.F[i] = objective(demand, supply);
		}

		// Find initial best solution
		int fmin_i = 0;
		for ( int i = 0; i < N; i++ ){
			if ( F[i] < F[fmin_i] )
				fmin_i = i;
		}

		// Store minimum fitness and it's index.
		// B holds the best solution array[1xD]
		this.fmin = F[fmin_i];
		this.B = X[fmin_i]; // (1xD)
	}

	private double objective(double[] demand, double []supply){
		double sum = 0.0;
	
		for(int i=0;i<demand.length;i++){
			sum+=(Math.abs(demand[i]-supply[i]))/this.amount;
			
		}
		
		return sum;
	}

	private double[] simpleBounds(double[] Xi){
		// Don't know if this should be implemented
		double[] Xi_temp = new double[D];
		System.arraycopy(Xi, 0, Xi_temp, 0, D);

		for ( int i = 0; i < D; i++ ){
			if ( Xi_temp[i] < lb[0][i] )
				Xi_temp[i] = lb[0][i];
			else continue;
		}

		for ( int i = 0; i < D; i++ ){
			if ( Xi_temp[i] > ub[0][i] )
				Xi_temp[i] = lb[0][i];
			else continue;
		}
		return Xi_temp;
	}

	private void startBat(){

		double[][] S = new double[N][D];
		int n_iter = 0;
		FinalDemand fd=new FinalDemand();
		fd.setFinalDemand(this.amount);
		this.demand=fd.getDemand();
		// Loop for all iterations/generations(MAX)
		
		
	for(int d=0;d<365;d++){
		System.out.println("----------Day: "+(d+1)+" ----------");
	
		for ( int t = 0; t < MAX; t++ ){
			// Loop for all bats(N)
			//System.out.println("ITERATION: "+(t+1));
		//	System.out.println("--------------------------------------------------------------------------------------------");
			for ( int i = 0; i < N; i++ ){
				//System.out.println("Bat: "+(i+1));
				Supply sup=new Supply();
				/*sup.setSupply(this.amount);
				this.supply=sup.getSupplyArray();
				
				carry[i]=*/
				if(d==0){
					//FIRST DAY
					//REMAINDER FROM PREVIOUS DAY=0
					sup.setSupply(remainder,amount);
				
					supply=sup.getSupplyArray();
					
					
					supplyForDay=addArrays(supply);
					
					
					
				
					
					fit.setFitness(amount,this.demand, supply);
					fitness=fit.getFitness();
					rem.setRemainder(demand, supply);
					remainder=rem.getRemainder();
					pull.setPull(supply, demand, remainder);
					importation=pull.getImport();
					
					if(t==0){
						tempFit=fitness;
						bestGen=(t+1);
						bestSupply=supply;bestDemand=demand;bestRemainder=remainder; bestImport=importation;
						}
					
					if(fitness<tempFit){
						tempFit=fitness;
						bestItr=(t+1);
						bestBat=(i+1);
						bestSupply=supply;bestDemand=demand;bestRemainder=remainder;
						
						for(int k=0;k<8;k++){
							avgDem+=bestDemand[k];
							avgSup+=bestSupply[k];
						}
						
						
						
					
					}
					
					
					/*disp.display(demand,CarryOver, supply,remainder, Compatible, EXPIRY,fitness);
					System.out.println("");*/
					
					
					for(int k=0;k<8;k++){
						
						if(demand[k]==supply[k]){
							
							count++;
						}
						if(count==8){
							NumberOfSolutions++;
						}
					}
					
					
					if(t==(MAX-1)){
						disp.display(bestDemand,CarryOver, bestSupply,remainder, bestImport, bestExp,fitness);
						System.out.println("");
						//System.out.println("Best Solution found in generation: "+bestItr);
						//System.out.println("Number of Solutions found:  "+NumberOfSolutions);
					}
					//CarryOver=bestRemainder;
				}//ends IF (DAY==0)
			}
			for ( int tt = 0; tt < MAX; tt++ ){
				for ( int i = 0; i < N; i++ ){
				 if(d>0){
					sup.setSupply(remainder,amount);
					//fd.setFinalDemand(1);
					supply=sup.getSupplyArray();
					
					
				
					supplyForDay=addArrays2(supply,CarryOver);
				
					rem.setRemainder(demand, AddSuppToCarry(supply,CarryOver));
					remainder=rem.getRemainder();

					//fit.setFitness(demandForDay, supplyForDay);
					
					fitness=this.objective(this.demand,this.supply);
					
					//setting expiry
					Expiry e=new Expiry();
					e.setExpiry(d, supply, demand);
					EXPIRY=e.getExpiry();
					
					pull.setPull(supply, demand, remainder);
					importation=pull.getImport();
					
					
					if(tt==0){
					tempFit=fitness;
					bestGen=(tt+1);
					bestSupply=supply;bestDemand=demand;bestRemainder=remainder; bestImport=importation;
					//avgDem=0; avgSup=0; avgImp=0; avgExp=0;
					for(int k=0;k<8;k++){
						avgDem+=bestDemand[k];
						avgSup+=bestSupply[k];
						avgExp+=EXPIRY[k];
						avgImp+=bestImport[k];
					}
					/**/
					}
					
					if(fitness<tempFit){
						tempFit=fitness;
						bestGen=(t+1);
						bestSupply=supply;bestDemand=demand;bestRemainder=remainder;bestImport=importation;
						//avgDem=0; avgSup=0; avgImp=0; avgExp=0;
						for(int k=0;k<8;k++){
							avgDem+=bestDemand[k];
							avgSup+=bestSupply[k];
							avgImp+=bestImport[k];
							avgExp+=EXPIRY[k];
						}
						
					}
					//insert expiry
					
					
					/*disp.display(demand,CarryOver, supply,remainder, Compatible, EXPIRY,fitness);
					System.out.println("");*/
					
					for(int k=0;k<8;k++){
						
						if(demand[k]==supply[k]){
							count++;
						}
						if(count==8){
							NumberOfSolutions++;
						}
					}
					
					
					
					 
					
					
					}
				
				// Update frequency (Nx1)
				Q[i][0] = Q_MIN + (Q_MIN-Q_MAX) * rand.nextDouble();
				// Update velocity (NxD)
				for ( int j = 0; j < D; j++ ){
					V[i][j] = V[i][j] + (X[i][j] - B[j]) * Q[i][0];
				}
				// Update S = X + V
				for ( int j = 0; j < D; j++ ){
					S[i][j] = X[i][j] + V[i][j];
				}
				// Apply bounds/limits
				X[i] = simpleBounds(X[i]);
				// Pulse rate
				if ( rand.nextDouble() > R )
					for ( int j = 0; j < D; j++ )
						X[i][j] = B[j] + 0.001 * rand.nextGaussian();


				// Evaluate new solutions
				//double fnew = this.objective(this.demand,this.supply);
				double fnew=fitness;
				// Update if the solution improves or not too loud
				//&& rand.nextDouble() < A
				if ( fnew <= F[i] ){
					//System.out.println("EBIBUYBNUYSVCUYS");
					X[i] = S[i];
					F[i] = fnew;
					bestSupply=this.supply;bestDemand=this.demand;bestImp=this.imp;//bestExp=this.exp;
					bestExp=EXPIRY;
				}

				// Update the current best solution
				if ( fnew <= fmin ){
					B = X[i];
					fmin = fnew;
					
				}
				
				
				//disp.display(this.demand, null, this.supply, null, null, null, F[i]);
			} // end loop for N
			
			n_iter = n_iter + N;
			if(tt==(MAX-1)){
				disp.display(bestDemand,CarryOver, bestSupply,remainder, bestImport, bestExp,fitness);
				System.out.println("");
				//System.out.println("Best Solution found in iteration: "+bestGen+", bat: "+bestBat);
			//	System.out.println("Number of Solutions found:  "+NumberOfSolutions);
			}
		}	 // end loop for I
		}
		}//ends days loop
		
		
		/*System.out.println("Number of evaluations : " + n_iter );
		System.out.println("Best = " + Arrays.toString(B) );
		System.out.println("fmin = " + fmin );*/
		
	}

	public static double addArrays(double [] arr){
		double amount=0;
		for(int i=0;i<arr.length;i++){
			amount+=arr[i];
		}
		return amount;
	}
	
	public static double addArrays2(double [] arr, double []rem){
		double amount=0;
		for(int i=0;i<arr.length;i++){
			amount+=arr[i]+rem[i];
		}
		return amount;
	}
	
	public static double [] AddSuppToCarry(double [] arr, double []rem){
		double [] amount=new double[8];
		for(int i=0;i<arr.length;i++){
			amount[i]=arr[i]+rem[i];
		}
		return amount;
	}
	
	public static void main(String[] args) {
		//for(int i=0;i<365;i++){
		//	System.out.println("Day: "+(i+1));
		new BatAlgorithm(5, 10, 0.0, 1.0, 0.0, 1.0).startBat();
		//}
		}
	
	
	
	
}